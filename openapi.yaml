openapi: 3.1.0

info:
  title: Document Service API
  summary: |
    RESTful service for storing, retrieving, and managing versioned documents.
  description: |
    The Document Service offers CRUD operations, fine-grained version control,
    and cursor-based pagination for documents of any MIME type.
    All responses use standard HTTP semantics and are wrapped (where useful) in
    reusable schemas for consistency and future extensibility.
  version: "1.0.0"
  contact:
    name: API Support
    url: https://docs.example.com/document-service
    email: support@example.com
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080
    description: development

tags:
  - name: Documents
    description: Document CRUD and metadata
  - name: Versions
    description: Per-document version history
  - name: Health
    description: Operational health checks
security:
  - ApiKeyAuth: []
  - BearerAuth: []
paths:
  /documents:
    get:
      tags: [ Documents ]
      summary: List documents
      operationId: listDocuments
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          $ref: "#/components/responses/DocumentList"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [ Documents ]
      summary: Create a new document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "201":
          description: Document created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /documents/{documentId}:
    parameters:
      - $ref: "#/components/parameters/documentId"
    get:
      tags: [ Documents ]
      summary: Retrieve a document’s metadata
      responses:
        "200":
          description: Metadata returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [ Documents ]
      summary: Replace document metadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200": { $ref: "#/components/responses/DocumentSingle" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [ Documents ]
      summary: Permanently delete a document
      responses:
        "204":
          description: Document removed
        "404": { $ref: "#/components/responses/NotFound" }
  /v1/documents:
    get:
      tags: [Documents]
      summary: List documents
      responses:
        "200":
          $ref: "#/components/responses/DocumentList"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [Documents]
      summary: Create a new document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "201":
          description: Document created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /v1/documents/{documentId}:
    parameters:
      - $ref: "#/components/parameters/documentId"
    get:
      tags: [Documents]
      summary: Retrieve a document’s metadata
      responses:
        "200":
          description: Metadata returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Documents]
      summary: Replace document metadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200": { $ref: "#/components/responses/DocumentSingle" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Documents]
      summary: Permanently delete a document
      responses:
        "204":
          description: Document removed
        "404": { $ref: "#/components/responses/NotFound" }

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
  parameters:
    documentId:
      name: documentId
      in: path
      required: true
      description: Unique document identifier (UUID)
      schema:
        type: string
        format: uuid
  responses:
    DocumentList:
      description: Paginated list of documents
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentList"
    DocumentSingle:
      description: A single document
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Document"
    BadRequest:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    ## Core domain models ##
    Document:
      type: object
      required:
        - id
        - title
        - contentType
        - size
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 256
        description:
          type: string
          maxLength: 2048
        contentType:
          type: string
          example: application/pdf
        size:
          type: integer
          description: Document size in bytes
          minimum: 0
        checksum:
          type: string
          description: SHA-256 checksum (hex)
        latestVersionId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ## Collection + pagination ##
    DocumentList:
      type: object
      required: [items, pageInfo]
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Document"

    ## Common envelopes ##
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Machine readable error code
          example: NOT_FOUND
        message:
          type: string
          description: Human readable description
          example: Document not found
        details:
          type: array
          description: Field-level validation errors (if any)
          items:
            type: object
            required: [field, issue]
            properties:
              field:
                type: string
              issue:
                type: string
