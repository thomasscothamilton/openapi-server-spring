/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Document;
import org.openapitools.model.DocumentList;
import org.openapitools.model.Error;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-19T14:08:09.921984-04:00[America/New_York]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Documents", description = "Document CRUD and metadata")
public interface DocumentsApi {

    default DocumentsApiDelegate getDelegate() {
        return new DocumentsApiDelegate() {};
    }

    /**
     * DELETE /documents/{documentId} : Permanently delete a document
     *
     * @param documentId Unique document identifier (UUID) (required)
     * @return Document removed (status code 204)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "documentsDocumentIdDelete",
        summary = "Permanently delete a document",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Document removed"),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/documents/{documentId}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> documentsDocumentIdDelete(
        @Parameter(name = "documentId", description = "Unique document identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().documentsDocumentIdDelete(documentId, exchange);
    }


    /**
     * GET /documents/{documentId} : Retrieve a document’s metadata
     *
     * @param documentId Unique document identifier (UUID) (required)
     * @return Metadata returned (status code 200)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "documentsDocumentIdGet",
        summary = "Retrieve a document’s metadata",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Metadata returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents/{documentId}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Document>> documentsDocumentIdGet(
        @Parameter(name = "documentId", description = "Unique document identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().documentsDocumentIdGet(documentId, exchange);
    }


    /**
     * PUT /documents/{documentId} : Replace document metadata
     *
     * @param documentId Unique document identifier (UUID) (required)
     * @param document  (required)
     * @return A single document (status code 200)
     *         or Validation failed (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "documentsDocumentIdPut",
        summary = "Replace document metadata",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A single document", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/documents/{documentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Document>> documentsDocumentIdPut(
        @Parameter(name = "documentId", description = "Unique document identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Mono<Document> document,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().documentsDocumentIdPut(documentId, document, exchange);
    }


    /**
     * POST /documents : Create a new document
     *
     * @param document  (required)
     * @return Document created (status code 201)
     *         or Validation failed (status code 400)
     *         or Authentication failed (status code 401)
     */
    @Operation(
        operationId = "documentsPost",
        summary = "Create a new document",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Document created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Document>> documentsPost(
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Mono<Document> document,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().documentsPost(document, exchange);
    }


    /**
     * GET /documents : List documents
     *
     * @return Paginated list of documents (status code 200)
     *         or Authentication failed (status code 401)
     */
    @Operation(
        operationId = "listDocuments",
        summary = "List documents",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated list of documents", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<DocumentList>> listDocuments(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().listDocuments(exchange);
    }


    /**
     * DELETE /v1/documents/{documentId} : Permanently delete a document
     *
     * @param documentId Unique document identifier (UUID) (required)
     * @return Document removed (status code 204)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "v1DocumentsDocumentIdDelete",
        summary = "Permanently delete a document",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Document removed"),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/documents/{documentId}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> v1DocumentsDocumentIdDelete(
        @Parameter(name = "documentId", description = "Unique document identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().v1DocumentsDocumentIdDelete(documentId, exchange);
    }


    /**
     * GET /v1/documents/{documentId} : Retrieve a document’s metadata
     *
     * @param documentId Unique document identifier (UUID) (required)
     * @return Metadata returned (status code 200)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "v1DocumentsDocumentIdGet",
        summary = "Retrieve a document’s metadata",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Metadata returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/documents/{documentId}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Document>> v1DocumentsDocumentIdGet(
        @Parameter(name = "documentId", description = "Unique document identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().v1DocumentsDocumentIdGet(documentId, exchange);
    }


    /**
     * PUT /v1/documents/{documentId} : Replace document metadata
     *
     * @param documentId Unique document identifier (UUID) (required)
     * @param document  (required)
     * @return A single document (status code 200)
     *         or Validation failed (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "v1DocumentsDocumentIdPut",
        summary = "Replace document metadata",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A single document", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/documents/{documentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Document>> v1DocumentsDocumentIdPut(
        @Parameter(name = "documentId", description = "Unique document identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId,
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Mono<Document> document,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().v1DocumentsDocumentIdPut(documentId, document, exchange);
    }


    /**
     * GET /v1/documents : List documents
     *
     * @return Paginated list of documents (status code 200)
     *         or Authentication failed (status code 401)
     */
    @Operation(
        operationId = "v1DocumentsGet",
        summary = "List documents",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated list of documents", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/documents",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<DocumentList>> v1DocumentsGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().v1DocumentsGet(exchange);
    }


    /**
     * POST /v1/documents : Create a new document
     *
     * @param document  (required)
     * @return Document created (status code 201)
     *         or Validation failed (status code 400)
     *         or Authentication failed (status code 401)
     */
    @Operation(
        operationId = "v1DocumentsPost",
        summary = "Create a new document",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Document created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Document>> v1DocumentsPost(
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Mono<Document> document,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().v1DocumentsPost(document, exchange);
    }

}
